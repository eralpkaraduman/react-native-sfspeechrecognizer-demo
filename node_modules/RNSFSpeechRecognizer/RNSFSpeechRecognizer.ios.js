/**
 * @providesModule RNSFSpeechRecognizer
 * @flow
 */
'use strict';

import {
  NativeModules,
  NativeEventEmitter,
  NativeAppEventEmitter,
  DeviceEventEmitter,
  processColor
} from 'react-native';
const NativeRNSFSpeechRecognizer = NativeModules.RNSFSpeechRecognizer;
const eventEmitter = new NativeEventEmitter(NativeRNSFSpeechRecognizer);

/**
 * High-level docs for the RNSFSpeechRecognizer iOS API can be written here.
 */

export default class RNSFSpeechRecognizer {
  constructor(options) {
    this.options = options;

    this.onStatusChangedListener = eventEmitter.addListener("onStatusChanged", event => {
      const {status, prevStatus} = event;
      if (this.options.onStatusChanged) {
        this.options.onStatusChanged(
          this._statusNumberToString(status),
          this._statusNumberToString(prevStatus)
        );
      }
    });

    //... implement other listeners
  }

  getStatus() {
    return new Promise(resolve => NativeRNSFSpeechRecognizer.getStatus(statusNumber => {
      resolve(this._statusNumberToString(statusNumber));
    }));
  }

  prepare() {NativeRNSFSpeechRecognizer.prepare()}

  start() {NativeRNSFSpeechRecognizer.start()}

  stop() {NativeRNSFSpeechRecognizer.start()}

  destroy() {
    this.onStatusChangedListener.remove();
    // TODO: remove other listeners

    // probably there's no need to relay this further into native component
    NativeRNSFSpeechRecognizer.destroy(); // TODO: delete
    // stoping should be enough
    NativeRNSFSpeechRecognizer.stop();
  }

  _statusNumberToString(statusNumber) { // TODO use objc React enum converter
    statusNumber = parseInt(statusNumber);
    switch (statusNumber) {
      case 0: return 'idle';
      case 1: return 'ready';
      case 2: return 'recognizing';
      case 3: return 'unavailable';
      default:
        throw "Unknown statusNumber received from native SpeechRecognitionManager";
    }
  }

  // Microphone permissions
  isMicrophonePermissionGranted() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isMicrophonePermissionGranted(resolve)
    )
  }

  isMicrophonePermissionDenied() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isMicrophonePermissionDenied(resolve)
    )
  }

  requestMicrophonePermission() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.requestMicrophonePermission(resolve)
    )
  }
  // Speech Recognition permissions
  isSpeechRecognitionPermissionGranted() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isSpeechRecognitionPermissionGranted(resolve)
    )
  }

  isSpeechRecognitionPermissionDenied() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isSpeechRecognitionPermissionDenied(resolve)
    )
  }

  requestSpeechRecognitionPermission() {
    return new Promise(resolve => NativeRNSFSpeechRecognizer.requestSpeechRecognitionPermission(resolve))
  }
}
