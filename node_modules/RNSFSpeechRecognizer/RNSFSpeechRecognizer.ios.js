/**
 * @providesModule RNSFSpeechRecognizer
 * @flow
 */
'use strict';

import {
  NativeModules,
  NativeEventEmitter,
  NativeAppEventEmitter,
  DeviceEventEmitter,
  processColor
} from 'react-native';
const NativeRNSFSpeechRecognizer = NativeModules.RNSFSpeechRecognizer; // TODO: rename NativeRNSFSpeechRecognizer
const eventEmitter = new NativeEventEmitter(NativeRNSFSpeechRecognizer);
/**
 * High-level docs for the RNSFSpeechRecognizer iOS API can be written here.
 */

class RNSFSpeechRecognizer { // rename to something more appropriate

  static events = {
   onStatusChanged: "onStatusChanged"
    // TODO: add other events
  };

  constructor(options) {
    this.emitterSubscriptions = {};
  }

  getStatus() {
    return new Promise(resolve => NativeRNSFSpeechRecognizer.getStatus(statusNumber => {
      resolve(this._statusNumberToString(statusNumber));
    }));
  }

  prepare(options) {
    this._addEventListeners(options);
    NativeRNSFSpeechRecognizer.prepare()
  }

  start() {
    NativeRNSFSpeechRecognizer.start()
  }

  stop() {
    this._removeEventListeners();
    NativeRNSFSpeechRecognizer.start()
  }

  // Microphone permissions
  isMicrophonePermissionGranted() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isMicrophonePermissionGranted(resolve)
    )
  }

  isMicrophonePermissionDenied() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isMicrophonePermissionDenied(resolve)
    )
  }

  requestMicrophonePermission() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.requestMicrophonePermission(resolve)
    )
  }
  // Speech Recognition permissions
  isSpeechRecognitionPermissionGranted() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isSpeechRecognitionPermissionGranted(resolve)
    )
  }

  isSpeechRecognitionPermissionDenied() {
    return new Promise(
      resolve => NativeRNSFSpeechRecognizer.isSpeechRecognitionPermissionDenied(resolve)
    )
  }

  requestSpeechRecognitionPermission() {
    return new Promise(resolve => NativeRNSFSpeechRecognizer.requestSpeechRecognitionPermission(resolve))
  }

  // Internal methods

  _getEventNames = () => Object.keys(RNSFSpeechRecognizer.events).map(eventKey => RNSFSpeechRecognizer.events[eventKey])

  _addEmitterSubscription = (eventName, handler, internalHandler) => {
    if (handler) {
      const subscription = eventEmitter.addListener(eventName, event => internalHandler(event, handler));
      this.emitterSubscriptions[eventName] = subscription;
    }
  }

  _addEventListeners(options) {
    this._removeEventListeners();

    this._addEmitterSubscription(RNSFSpeechRecognizer.events.onStatusChanged, options.onStatusChanged, (event, handler) => {
      const {status, prevStatus} = event;
      handler(
        this._statusNumberToString(status),
        this._statusNumberToString(prevStatus)
      );
    });

    // TODO: add other events
  }

  _removeEventListeners() {
    this._getEventNames().forEach(eventName => {
      const subscription = this.emitterSubscriptions[eventName];
      if (subscription) {
        subscription.remove();
      }
    });
  }

  _statusNumberToString(statusNumber) { // TODO use objc React enum converter instead
    statusNumber = parseInt(statusNumber);
    switch (statusNumber) {
      case 0: return 'idle';
      case 1: return 'ready';
      case 2: return 'recognizing';
      case 3: return 'unavailable';
      default:
        throw "Unknown statusNumber received from native SpeechRecognitionManager";
    }
  }
}

const SpeechRecognizer = new RNSFSpeechRecognizer();
export default SpeechRecognizer;
