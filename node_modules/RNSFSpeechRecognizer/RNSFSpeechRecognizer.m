//
//  RNSFSpeechRecognizer.m
//  RNSFSpeechRecognizer
//
//  Created by Eralp Karaduman on 6/18/17.
//  Copyright Â© 2017 Super Damage. All rights reserved.
//

#import "RNSFSpeechRecognizer.h"
#import "SpeechRecognitionManager.h"

@interface RNSFSpeechRecognizer () <SDSpeechRecognitionManagerDelegate>
@property (nonatomic, strong) SpeechRecognitionManager *manager;
@end

@implementation RNSFSpeechRecognizer

NSString *onStatusChanged = @"onStatusChanged";
NSString *onTranscriptionReceived = @"onTranscriptionReceived";
NSString *onError = @"onError";

-(instancetype)init { // TODO: assume singleton
    self = [super init];
    if (self) {
        self.manager = [[SpeechRecognitionManager alloc] init];
        [_manager setDelegate:self];
    }
    return self;
}

- (NSDictionary *)constantsToExport
{
    return @{};
}

- (NSArray<NSString *> *)supportedEvents
{
    return @[onStatusChanged, onTranscriptionReceived, onError];
}

RCT_EXPORT_MODULE()

RCT_EXPORT_METHOD(prepare)
{
    [_manager prepare];
}

RCT_EXPORT_METHOD(start)
{
    [_manager start];
}

RCT_EXPORT_METHOD(stop)
{
    [_manager stop];
}

RCT_EXPORT_METHOD(getStatus:(RCTResponseSenderBlock)callback)
{
    NSNumber *numberStatus = [NSNumber numberWithInteger:_manager.status];
    callback(@[numberStatus]);
}

RCT_EXPORT_METHOD(isMicrophonePermissionGranted:(RCTResponseSenderBlock)callback) {
    NSNumber *granted = [NSNumber numberWithBool:_manager.isMicrophonePermissionGranted];
    callback(@[granted]);
}

RCT_EXPORT_METHOD(isMicrophonePermissionDenied:(RCTResponseSenderBlock)callback) {
    NSNumber *denied = [NSNumber numberWithBool:_manager.isMicrophonePermissionDenied];
    callback(@[denied]);
}

RCT_EXPORT_METHOD(requestMicrophonePermission:(RCTResponseSenderBlock)callback)
{
    [_manager requestMicrophonePermission:^(BOOL denied) {
        callback(@[[NSNumber numberWithBool:denied]]);
    }];
}

RCT_EXPORT_METHOD(isSpeechRecognitionPermissionGranted:(RCTResponseSenderBlock)callback)
{
    NSNumber *granted = [NSNumber numberWithBool:_manager.isSpeechRecognitionPermissionGranted];
    callback(@[granted]);
}

RCT_EXPORT_METHOD(isSpeechRecognitionPermissionDenied:(RCTResponseSenderBlock)callback)
{
    NSNumber *denied = [NSNumber numberWithBool:_manager.isSpeechRecognitionPermissionDenied];
    callback(@[denied]);
}

RCT_EXPORT_METHOD(requestSpeechRecognitionPermission:(RCTResponseSenderBlock)callback)
{
    [_manager requestSpeechRecognitionPermission:^(BOOL denied) {
        callback(@[[NSNumber numberWithBool:denied]]);
    }];
}

#pragma mark - SDSpeechRecognitionManagerDelegate

-(void)manager:(id)manager
didChangeStatus:(SpeechRecognitionManagerStatus)status
    fromStatus:(SpeechRecognitionManagerStatus)fromStatus {
    [self sendEventWithName:onStatusChanged body:@{
       @"status": [@(status) stringValue],
       @"prevStatus": [@(fromStatus) stringValue],
    }];
}

@end
