//
//  SpeechRecognitionManager.m
//  RNSFSpeechRecognizer
//
//  Created by Eralp Karaduman on 6/18/17.
//  Copyright Â© 2017 Super Damage. All rights reserved.
//

#import "SpeechRecognitionManager.h"
@import AVFoundation;
@import Speech;

@interface SpeechRecognitionManager () <SFSpeechRecognizerDelegate>
@property (nonatomic, strong) AVAudioEngine *audioEngine;
@end

@implementation SpeechRecognitionManager

-(instancetype)init {
    self = [super init];
    if (self) {
        self.audioEngine = [[AVAudioEngine alloc] init];
    }
    return self;
}

#pragma mark - Lifecycle
- (void)prepare {
    if (_status == SpeechRecognitionManagerStatusReady) {
        return;
    }

    [self stop];
    // ...
    [self setStatus:SpeechRecognitionManagerStatusReady];
}

- (void)start {
    if (_status == SpeechRecognitionManagerStatusRecognizing) {
        return;
    }

    [self prepare];
    if (_status != SpeechRecognitionManagerStatusReady) {
        return;
    }

    // ...
    [self setStatus:SpeechRecognitionManagerStatusRecognizing];
}

- (void)stop {
    // ...
    [self setStatus:SpeechRecognitionManagerStatusIdle];
}

- (void)destroy {
    [self stop];
    // TODO: destroy
    // TODO: remove sf delegates
}

- (void)setStatus:(SpeechRecognitionManagerStatus)newStatus {
    SpeechRecognitionManagerStatus prevStatus = _status;
    _status = newStatus;

    BOOL statusChanged = prevStatus != _status;
    BOOL responds = [_delegate respondsToSelector:@selector(manager:didChangeStatus:fromStatus:)];
    if (statusChanged && responds) {
        [_delegate manager:self didChangeStatus:_status fromStatus:prevStatus];
    }
}

#pragma mark - Microphone Permissions
- (BOOL)isMicrophonePermissionGranted {
    AVAudioSessionRecordPermission status = [[AVAudioSession sharedInstance] recordPermission];
    return status == AVAudioSessionRecordPermissionGranted;
}

- (BOOL)isMicrophonePermissionDenied {
    AVAudioSessionRecordPermission status = [[AVAudioSession sharedInstance] recordPermission];
    return status == AVAudioSessionRecordPermissionDenied;
}

- (void)requestMicrophonePermission:(void (^ _Nonnull)(BOOL))callback {
    [[AVAudioSession sharedInstance] requestRecordPermission:^(BOOL granted) {
        [[NSOperationQueue mainQueue] addOperationWithBlock:^{
            callback(granted);
        }];
    }];
}

#pragma mark - Speech Recognition Permissions
- (BOOL)isSpeechRecognitionPermissionGranted {
    SFSpeechRecognizerAuthorizationStatus status = [SFSpeechRecognizer authorizationStatus];
    return status == SFSpeechRecognizerAuthorizationStatusAuthorized;
}

- (BOOL)isSpeechRecognitionPermissionDenied {
    SFSpeechRecognizerAuthorizationStatus status = [SFSpeechRecognizer authorizationStatus];
    return status == SFSpeechRecognizerAuthorizationStatusDenied;
}

- (void)requestSpeechRecognitionPermission:(void (^ _Nonnull)(BOOL))callback {
    [SFSpeechRecognizer requestAuthorization:^(SFSpeechRecognizerAuthorizationStatus status) {
        [[NSOperationQueue mainQueue] addOperationWithBlock:^{
            callback([self isMicrophonePermissionGranted]);
        }];
    }];
}

#pragma mark - SFSpeechRecognizer Delegate Methods
- (void)speechRecognizer:(SFSpeechRecognizer *)speechRecognizer
   availabilityDidChange:(BOOL)available {

    if (!available) {
        [self stop];
        [self setStatus:SpeechRecognitionManagerStatusUnavailable];
    }
}

@end
